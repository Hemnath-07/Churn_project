# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1736sNir0Ch9iboJrypdzMvQQSlESlu-d
"""

# app.py
import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Churn Prediction Dashboard", layout="wide")

# Load trained model
model = joblib.load(""streamlit_app/model.pkl"")

st.title("üìâ Customer Churn Prediction Dashboard")

# Upload CSV file
uploaded_file = st.file_uploader("üì§ Upload your customer data CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìÑ Uploaded Dataset")
    st.dataframe(df)

    # Churn Analytics Section
    if 'Churn' in df.columns:
        st.subheader("üìä Churn Analytics")

        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total Customers", len(df))
            st.metric("Churned", df['Churn'].sum())
            st.metric("Churn Rate", f"{df['Churn'].mean()*100:.2f}%")
        with col2:
            fig, ax = plt.subplots()
            df['Churn'].value_counts().plot.pie(
                autopct='%1.1f%%',
                labels=['Retained', 'Churned'],
                colors=['lightgreen', 'salmon'],
                ax=ax
            )
            ax.set_ylabel('')
            st.pyplot(fig)

    # Prediction Section
    st.subheader("üîÆ Predict Customer Churn")

    # Prepare features (drop CustomerID, Churn; encode categoricals)
    features = df.drop(columns=['CustomerID', 'Churn'], errors='ignore')
    features_encoded = pd.get_dummies(features)

    # Ensure same columns as training data
    model_input_cols = model.feature_names_in_  # scikit-learn >=1.0
    for col in model_input_cols:
        if col not in features_encoded.columns:
            features_encoded[col] = 0
    features_encoded = features_encoded[model_input_cols]

    # Make predictions
    predictions = model.predict(features_encoded)
    df['Predicted_Churn'] = predictions

    st.write("‚úÖ Prediction Results")
    st.dataframe(df)

    # Download CSV with predictions
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("‚¨áÔ∏è Download Predicted Data", data=csv, file_name='churn_predictions.csv', mime='text/csv')
